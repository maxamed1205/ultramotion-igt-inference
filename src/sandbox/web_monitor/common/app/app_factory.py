"""
Module : app_factory.py
-----------------------
Cr√©e et configure l'application FastAPI pour le Web Monitor :
- CORS pour acc√®s LAN
- s√©curit√© via X-API-Token
- montage statiques (/assets)
- enregistrement routes REST et WebSocket
- initialisation propre du LogCollector (r√©el ou simul√©)
"""

from fastapi import FastAPI, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse, PlainTextResponse
from fastapi.staticfiles import StaticFiles
from fastapi.exceptions import RequestValidationError
from starlette.exceptions import HTTPException as StarletteHTTPException
from pathlib import Path
from contextlib import asynccontextmanager
import logging
import tempfile
import asyncio

# Collector r√©el : LogCollector lit les fichiers pipeline.log et kpi.log
from sandbox.web_monitor.common.collector.log_collector.collector import LogCollector as Collector

# Import des routes
from sandbox.web_monitor.common.app.api_routes import register_api_routes
from sandbox.web_monitor.common.app.ws_routes import register_ws_routes


# ------------------------------------------------------------------
# üß© Gestion du cycle de vie (startup / shutdown)
# ------------------------------------------------------------------
@asynccontextmanager
async def lifespan(app: FastAPI):
    """Gestion du cycle de vie complet de l'application FastAPI."""
    log = logging.getLogger("igt.dashboard")
    log.info("[APP] üöÄ D√©marrage de l‚Äôapplication (lifespan)")

    # --- Phase de d√©marrage ---
    yield  # ‚è∏Ô∏è Ex√©cution normale de l‚Äôapplication

    # --- Phase d‚Äôarr√™t ---
    log.info("[APP] üßπ Signal de shutdown re√ßu ‚Äî stop_event d√©clench√© pour les WS")
    if hasattr(app.state, "stop_event"):
        app.state.stop_event.set()

    try:
        if hasattr(app.state, "collector"):
            app.state.collector.stop()
            log.info("[APP] ‚úÖ LogCollector arr√™t√© proprement (lifespan)")
    except Exception as e:
        log.error(f"[APP] Erreur lors de l‚Äôarr√™t du collector: {e}")


# ------------------------------------------------------------------
# üß© Cr√©ation et configuration principale de l‚Äôapplication
# ------------------------------------------------------------------
def create_app(cfg):
    """Cr√©e et retourne une instance compl√®te de l‚Äôapplication FastAPI."""
    log = logging.getLogger("igt.dashboard")

    meta = cfg.get("dashboard", {})
    app = FastAPI(
        title="Ultramotion Web Monitor",
        version="0.2-dev",
        description="Monitoring temps r√©el du pipeline Ultramotion",
        lifespan=lifespan,  # ‚úÖ nouvelle gestion du shutdown
    )

    # ------------------------------------------------------------------
    # üîí Middleware de v√©rification du jeton HTTP (pas WebSocket)
    # ------------------------------------------------------------------
    @app.middleware("http")
    async def verify_token(request: Request, call_next):
        if request.scope["type"] != "http":
            return await call_next(request)

        if meta.get("security", {}).get("enabled", False):
            expected = meta["security"].get("token")
            token = request.headers.get("X-API-Token")
            if token != expected:
                log.warning(f"Requ√™te non autoris√©e depuis {request.client.host}")
                return JSONResponse({"error": "unauthorized"}, status_code=401)

        return await call_next(request)

    # ------------------------------------------------------------------
    # üåê CORS + gestion d'erreurs globale
    # ------------------------------------------------------------------
    app.add_middleware(
        CORSMiddleware,
        allow_origins=["*"],  # √† restreindre plus tard si besoin
        allow_credentials=True,
        allow_methods=["*"],
        allow_headers=["*"],
    )

    @app.exception_handler(StarletteHTTPException)
    async def http_exception_handler(request, exc):
        return JSONResponse({"error": exc.detail}, status_code=exc.status_code)

    @app.exception_handler(RequestValidationError)
    async def validation_exception_handler(request, exc):
        return JSONResponse({"error": "invalid request", "details": exc.errors()}, status_code=422)

    # ------------------------------------------------------------------
    # üì¶ Montage des fichiers statiques
    # ------------------------------------------------------------------
    base_dir = Path(__file__).resolve().parents[2]
    assets_path = base_dir / "assets"
    javascript_path = assets_path / "javascript"

    app.mount("/assets", StaticFiles(directory=str(assets_path)), name="assets")
    app.mount("/javascript", StaticFiles(directory=str(javascript_path)), name="javascript")

    app.state.cfg = cfg

    # ------------------------------------------------------------------
    # üß© Initialisation du Collector
    # ------------------------------------------------------------------
    try:
        # 1Ô∏è‚É£ Lecture des chemins depuis config YAML
        collector_cfg = meta.get("collector", {})
        pipeline_path = collector_cfg.get("pipeline_path")
        kpi_path = collector_cfg.get("kpi_path")

        # 2Ô∏è‚É£ Valeurs par d√©faut si non pr√©cis√©es
        if not pipeline_path or not kpi_path:
            log.warning("[APP] Chemins collector non d√©finis ‚Äî utilisation des logs r√©els du pipeline")

            # Remonte de 4 niveaux pour atteindre la racine du projet
            default_dir = Path(__file__).resolve().parents[4] / "logs"

            pipeline_path = str(default_dir / "pipeline.log")
            kpi_path = str(default_dir / "kpi.log")

            # üîç Ajout de logs et prints explicites pour v√©rification
            log.info(f"[APP] üîç Dossier racine logs d√©tect√© : {default_dir}")
            log.info(f"[APP] üîó pipeline.log  => {pipeline_path}")
            log.info(f"[APP] üîó kpi.log       => {kpi_path}")

        # 3Ô∏è‚É£ Instanciation du collector r√©el
        app.state.collector = Collector(pipeline_path=pipeline_path, kpi_path=kpi_path)
        app.state.collector.start()
        log.info(f"[APP] Collector r√©el attach√© ‚úÖ ({pipeline_path}, {kpi_path})")

    except Exception as e:
        # Fallback simul√© si le collector √©choue
        log.warning(f"[APP] Collector r√©el indisponible ({e}); utilisation du mock ‚ö†Ô∏è")
        tmp1 = tempfile.NamedTemporaryFile(delete=False).name
        tmp2 = tempfile.NamedTemporaryFile(delete=False).name
        try:
            mock_collector = Collector(tmp1, tmp2)
            app.state.collector = mock_collector
            log.info("[APP] Collector simul√© attach√© √† app.state.collector (fallback)")
        except Exception as e2:
            log.error(f"[APP] Impossible d‚Äôattacher un collector (r√©el ni simul√©): {e2}")
            app.state.collector = None

    # ------------------------------------------------------------------
    # üîå Enregistrement des routes
    # ------------------------------------------------------------------
    register_api_routes(app)
    register_ws_routes(app)

    # ------------------------------------------------------------------
    # üíì Health Check
    # ------------------------------------------------------------------
    @app.get("/api/health")
    async def health_check(request: Request):
        token = request.headers.get("X-API-Token")
        expected = meta.get("security", {}).get("token")
        if meta.get("security", {}).get("enabled", False) and token != expected:
            return JSONResponse({"error": "unauthorized"}, status_code=401)
        return {"status": "ok"}

    from sandbox.web_monitor.common.app.api_routes import router as api_router
    app.include_router(api_router)

    # ------------------------------------------------------------------
    # ‚úÖ Gestion silencieuse du CancelledError pendant le shutdown
    # ------------------------------------------------------------------
    @app.middleware("http")
    async def ignore_cancelled_error(request: Request, call_next):
        try:
            return await call_next(request)
        except asyncio.CancelledError:
            log.info("[APP] ‚úÖ Arr√™t propre d√©tect√© (CancelledError ignor√©)")
            return PlainTextResponse("Server shutting down...", status_code=503)

    log.info("Application FastAPI configur√©e avec CORS, s√©curit√© et collector pr√™t ‚úÖ")
    return app
