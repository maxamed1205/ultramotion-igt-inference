version: 1  # version du format de configuration du module logging (obligatoire pour le chargeur YAML)
disable_existing_loggers: false  # conserve les loggers déjà existants (utile quand des libs externes ont leur propre logger)

# Configuration du système de journalisation (logging) pour Ultramotion IGT Inference
#
# Politiques :
# - LOG_MODE=dev|perf contrôle la verbosité de la console (dev=INFO, perf=WARNING). Définie via la variable d’environnement LOG_MODE.
# - ASYNC_LOG=1|0 active ou désactive l’écriture asynchrone sur disque. Si ASYNC_LOG=1, le sous-système asynchrone devient l’unique écrivain pour les fichiers pipeline.log, kpi.log et error.log.
# - Le script de démarrage (main.py) est responsable de la création du répertoire `logs/` avant le chargement de ce fichier.
# - main.py ajuste automatiquement le niveau du handler console selon la variable LOG_MODE (LOG_MODE=dev → INFO, LOG_MODE=perf → WARNING). Ne pas modifier console.level ici : c’est main.py qui applique le réglage au lancement.
# - Convention : utiliser des noms de logger sous la hiérarchie `igt.*` (par exemple igt.service, igt.monitor, igt.kpi).

# ─────────────────────────────────────────────────────────────
# Politique console :
# LOG_MODE=dev  → console.level = INFO (ajusté au démarrage)
# LOG_MODE=perf → console.level = WARNING (par défaut)
# Le niveau console est toujours ajusté par main.py.
# Ne pas modifier ce champ manuellement.
# ─────────────────────────────────────────────────────────────
# ─────────────────────────────────────────────────────────────
# FORMATTERS
# ─────────────────────────────────────────────────────────────
formatters:
  standard:  # format principal pour logs console
    format: "[%(asctime)s] [%(levelname)s] %(processName)s/%(threadName)s | %(name)s | %(message)s"  # timestamp, niveau, nom thread, logger, message

  kpi:  # format spécialisé pour les métriques KPI
    format: "kpi ts_log=%(asctime)s %(message)s"  # ex: kpi ts_log=2025-10-28 11:33:12,888 latency_ms=12.3 fps_rx=30.0

# ─────────────────────────────────────────────────────────────
# FILTRES
# ─────────────────────────────────────────────────────────────
filters:
  perf_filter:  # filtre maison pour réduire la verbosité en mode perf
    '()': core.monitoring.filters.PerfFilter  # charge la classe PerfFilter depuis ton module
  no_error:  # filtre qui empêche duplication des erreurs (déjà redirigées vers error.log)
    '()': core.monitoring.filters.NoErrorFilter  # charge la classe NoErrorFilter

# ─────────────────────────────────────────────────────────────
# HANDLERS
# ─────────────────────────────────────────────────────────────
handlers:
  console:  # unique handler : affichage dans la console
    class: logging.StreamHandler  # sortie standard (stdout)
    formatter: standard  # utilise le format standard défini plus haut
    level: WARNING  # niveau minimum (sera ajusté dynamiquement par main.py selon LOG_MODE)
    filters: [perf_filter]  # applique le filtre de performance (désactive logs trop fréquents)

# ─────────────────────────────────────────────────────────────
# LOGGERS PAR MODULE
# ─────────────────────────────────────────────────────────────
loggers:
  igt:  # logger racine de toute la suite Ultramotion
    level: INFO  # niveau par défaut (modifiable en runtime)
    handlers: [console]  # affiche uniquement sur la console (fichiers gérés par async_logging)
    propagate: no  # empêche la propagation vers le logger racine Python

  igt.receiver:  # module de réception (thread RX)
    level: DEBUG  # détail utile pour débogage de flux RX
    handlers: [console]  # console uniquement
    propagate: no  # pas de remontée

  igt.queues:  # gestion des files et buffers
    level: INFO
    handlers: [console]
    propagate: no

  igt.gpu:  # traitements GPU
    level: INFO
    handlers: [console]
    propagate: no

  igt.inference:  # moteur d'inférence IA (D-FINE, MobileSAM)
    level: INFO
    handlers: [console]
    propagate: no

  igt.slicer:  # thread TX vers 3D Slicer
    level: INFO
    handlers: [console]
    propagate: no

  igt.monitor:  # supervision et KPIs internes
    level: INFO
    handlers: [console]
    propagate: no

  igt.kpi:  # logger dédié aux métriques (redirigé vers kpi.log par async_logging)
    level: INFO
    handlers: [console]  # on garde console uniquement ici
    propagate: no

  igt.service:  # orchestration (gateway, detection, etc.)
    level: INFO
    handlers: [console]
    propagate: no

  igt.types:  # structures et dataclasses
    level: DEBUG
    handlers: [console]
    propagate: no

  igt.fsm:  # machine à états (visibility FSM)
    level: DEBUG
    handlers: [console]
    propagate: no

  igt.queues.gpu_buffers:  # sous-module GPU buffers
    level: DEBUG
    handlers: [console]
    propagate: no

  igt.slicer_server:  # serveur TX simulé (pyigtl)
    level: INFO
    handlers: [console]
    propagate: no

  igt.gateway.stats:  # statistiques gateway (latences RX→TX)
    level: DEBUG  # ✅ ACTIVER DEBUG pour voir les logs mark_rx/mark_tx
    handlers: [console]
    propagate: no

  igt.gateway.test:  # tests gateway (dataset mock, etc.)
    level: DEBUG  # ✅ ACTIVER DEBUG pour voir tous les détails du test
    handlers: [console]
    propagate: no
    
  igt.mock:  # racine des modules de simulation (mock gateway runner)
    level: INFO
    handlers: [console]
    propagate: no

  igt.mock.log_utils:
    level: INFO
    handlers: [console]
    propagate: no

  igt.mock.gpu:
    level: INFO
    handlers: [console]
    propagate: no

  igt.mock.rx:  # dataset_reader.py
    level: DEBUG
    handlers: [console]
    propagate: no

  igt.mock.proc:  # proc_simulator.py
    level: DEBUG
    handlers: [console]
    propagate: no

  igt.mock.tx:  # tx_server.py
    level: DEBUG
    handlers: [console]
    propagate: no

  igt.mock.runner:  # runner.py
    level: INFO
    handlers: [console]
    propagate: no

  igt.mock.monitor:  # state_monitor.py
    level: INFO
    handlers: [console]
    propagate: no

# ─────────────────────────────────────────────────────────────
# LOGGER RACINE
# ─────────────────────────────────────────────────────────────
root:
  level: WARNING  # niveau minimal par défaut (seulement warnings et erreurs)
  handlers: [console]  # affiche uniquement dans la console