"""High-level gateway manager (public IGTGateway class).

This class focuses on orchestration only and delegates stats, events and
supervision to dedicated components.
"""
from __future__ import annotations

# === Standard Library ===
import logging
import threading
import time
from typing import Any, Callable, Dict, Optional, Union

# === Project Modules ===
from service.registry import THREAD_REGISTRY
from core.types import RawFrame
from core.queues.adaptive import AdaptiveDeque
from service.gateway.config import GatewayConfig
from service.gateway.stats import GatewayStats
from service.gateway.events import EventEmitter
from service.gateway.supervisor import SupervisorThread

# === Logger ===
LOG = logging.getLogger("igt.service")

class IGTGateway:
    """
    Orchestrateur OpenIGTLink principal.
    
    R√¥le :
      - coordonner les threads RX (r√©ception), TX (envoi) et Supervisor (monitoring),
      - g√©rer les files internes de frames et de masques (`AdaptiveDeque`),
      - exposer les statistiques et √©v√©nements syst√®me.
    
    Cette classe ne traite pas directement les images ; elle contr√¥le le flux
    et la stabilit√© de la passerelle IGTLink en s‚Äôappuyant sur les composants
    sp√©cialis√©s (`GatewayStats`, `SupervisorThread`, etc.).
    """

    def __init__(
        self,
        config_or_host: Union[GatewayConfig, str],
        *args: Any,
        **kwargs: Any,
    ) -> None:
        """
        Initialise le gestionnaire de passerelle IGTLink.
        
        Deux modes de construction :
            1 Recommand√© : avec un objet GatewayConfig pr√©-initialis√©.
              ex: IGTGateway(GatewayConfig.from_yaml("src/config/gateway.yaml"))

            2 Legacy : avec des arguments explicites (pour compatibilit√©).
              ex: IGTGateway("127.0.0.1", 18944, 18945, target_fps=25.0)
        """
        # --- R√©solution et validation de la configuration
        if isinstance(config_or_host, GatewayConfig):
            config: GatewayConfig = config_or_host
        else:
            plus_host: str = str(config_or_host)
            if len(args) < 2:
                raise ValueError(
                    "Legacy constructor requires plus_port and slicer_port as positional args"
                )

            plus_port: int = int(args[0])
            slicer_port: int = int(args[1])
            target_fps: float = float(kwargs.get("target_fps", 25.0))
            supervise_interval_s: float = float(kwargs.get("supervise_interval_s", 2.0))

            config = GatewayConfig(
                plus_host=plus_host,
                plus_port=plus_port,
                slicer_port=slicer_port,
                target_fps=target_fps,
                supervise_interval_s=supervise_interval_s,
            )

        # --- Stockage des param√®tres principaux
        self.config: GatewayConfig = config                 # objet dataclass typ√© charg√© depuis YAML (configuration compl√®te de r√©f√©rence, immuable √† runtime)
        self.plus_host: str = config.plus_host              # adresse IP / hostname du serveur PlusServer
        self.plus_port: int = config.plus_port              # port TCP d‚Äôentr√©e pour la r√©ception d‚Äôimages IGTLink
        self.slicer_port: int = config.slicer_port          # port TCP de sortie pour l‚Äôenvoi des masques vers 3D Slicer
        self.target_fps: float = config.target_fps          # cadence cible (images/s) vis√©e par la passerelle
        self.supervise_interval_s: float = config.supervise_interval_s  # intervalle (s) entre deux cycles de supervision

        # --- Gestion des threads
        self._stop_event: threading.Event = threading.Event()  # signal d'arr√™t partag√© entre tous les threads (permet un arr√™t propre et coordonn√©)
        self._tx_ready: threading.Event = threading.Event()    # üî¨ OPTIMISATION : signal Event pour r√©veiller instantan√©ment le thread TX quand une frame est disponible dans _outbox
        self._rx_ready: threading.Event = threading.Event()    # üî¨ SYNCHRONISATION : signal Event pour indiquer qu'une frame RX est disponible dans _mailbox
        self._rx_thread: Optional[threading.Thread] = None     # thread de r√©ception des images et poses (depuis PlusServer)
        self._tx_thread: Optional[threading.Thread] = None     # thread d'envoi des r√©sultats (vers 3D Slicer)
        self._supervisor_thread: Optional[threading.Thread] = None  # thread de supervision (surveille d√©bit, latence, √©tat des threads)
        self._running: bool = False                            # indicateur global d'√©tat du service (True = threads actifs)

        # --- Buffers internes (queues adaptatives)
        self._mailbox: AdaptiveDeque[RawFrame] = AdaptiveDeque(maxlen=2)  # buffer d‚Äôentr√©e √† faible latence (RawFrame brutes depuis PlusServer)
        self._outbox: AdaptiveDeque[tuple[Any, Dict[str, Any]]] = AdaptiveDeque(maxlen=8)  # buffer de sortie (masques + m√©tadonn√©es destin√©s √† 3D Slicer)


        # --- Composants auxiliaires ---
        # autorise une configuration optionnelle des statistiques via la section config.stats
        stats_cfg = getattr(config, "stats", None)  # r√©cup√®re la sous-section "stats" du fichier de configuration si elle existe, sinon renvoie None (permet de personnaliser la taille des fen√™tres de mesure)
        
        if stats_cfg and isinstance(stats_cfg, dict): # V√©rifie si la configuration des statistiques est valide
            rolling_size = int(stats_cfg.get("rolling_window_size", 20))  # lit la taille de la fen√™tre glissante utilis√©e pour calculer les moyennes de fps (par d√©faut 20)
            latency_size = int(stats_cfg.get("latency_window_size", 200))  # lit la taille maximale du buffer de latence RX‚ÜíTX (par d√©faut 200 √©chantillons)
            
            self.stats: GatewayStats = GatewayStats( # cr√©e une instance du collecteur de statistiques GatewayStats
                rolling_window_size=rolling_size, # avec les tailles de fen√™tres sp√©cifi√©es dans la configuratio
                latency_window_size=latency_size  # avec les tailles de fen√™tres sp√©cifi√©es dans la configuration
            )  
            
        else: # si aucune section "stats" n‚Äôest d√©finie, instancie GatewayStats avec les valeurs par d√©faut (20 / 200)
            self.stats: GatewayStats = GatewayStats()  

        self.events: EventEmitter = EventEmitter()  # initialise le gestionnaire d‚Äô√©v√©nements internes, utilis√© pour √©mettre des signaux asynchrones (erreurs, notifications, √©tat de threads, etc.)

        self._last_rx_ts_local: Optional[float] = None  # dernier timestamp local (time.time) ‚Äî utilis√© pour estimer un fps de secours si aucune horodatation RX n‚Äôest fournie
        # --- Journalisation d‚Äôinitialisation
        LOG.info(
            "IGTGateway initialized (plus=%s:%d, slicer_port=%d, fps=%.1f, interval=%.1fs)",
            self.plus_host,
            self.plus_port,
            self.slicer_port,
            self.target_fps,
            self.supervise_interval_s,
        )

    @property
    def buffers(self) -> Dict[str, Any]:
        """Expose les buffers internes de la passerelle pour le superviseur (lecture seule)."""
        return {"mailbox": self._mailbox, "outbox": self._outbox}  # renvoie un dictionnaire contenant les files d‚Äôentr√©e (mailbox) et de sortie (outbox)

    @property
    def is_running(self) -> bool:
        return (self._running and not self._stop_event.is_set())  # retourne True si la passerelle est active et qu‚Äôaucun signal d‚Äôarr√™t n‚Äôa √©t√© d√©clench√©

    def start(self) -> None:

        if self.is_running:  # emp√™che de relancer le service s‚Äôil est d√©j√† en cours d‚Äôex√©cution
            LOG.warning("IGTGateway d√©j√† en cours d‚Äôex√©cution ‚Äî d√©marrage ignor√©")
            return

        LOG.info("D√©marrage de IGTGateway (PlusServer=%s:%d, Slicer=%d)",
                 self.plus_host, self.plus_port, self.slicer_port)  # message d‚Äôinformation indiquant le d√©marrage du service avec les ports configur√©s

        self._stop_event.clear()  # r√©initialise le signal d‚Äôarr√™t partag√© (permet un nouveau cycle de threads)
        self._running = True  # marque la passerelle comme active

        LOG.debug("Thread registry charg√© : %s", list(THREAD_REGISTRY.keys()))  # affiche la liste des fonctions enregistr√©es dans le registre global (pour d√©bogage)

        try:
            rx_target = THREAD_REGISTRY["rx"]  # THREAD_REGISTRY est un dictionnaire global contenant une table de correspondance statique entre des noms de threads ("rx", "tx") et leurs fonctions associ√©es ; ici on r√©cup√®re la fonction li√©e √† la cl√© "rx" (cible du thread de r√©ception)
        except KeyError:
            raise RuntimeError("THREAD_REGISTRY ne contient pas l‚Äôentr√©e 'rx' (v√©rifier service.registry)")  # erreur explicite si la fonction RX n‚Äôest pas trouv√©e

        rx_args = (  # arguments pass√©s au thread RX lors de sa cr√©ation
            self._mailbox,           # file d'entr√©e pour stocker les frames re√ßues
            self._stop_event,        # signal d'arr√™t partag√©
            self.plus_host,          # adresse du serveur PlusServer
            self.plus_port,          # port de r√©ception IGTLink
            self.update_rx_stats,    # fonction de rappel pour mettre √† jour les statistiques RX
            self.events.emit,        # √©metteur d'√©v√©nements (notifications, erreurs)
            self._rx_ready,          # üî¨ SYNCHRONISATION : Event pour signaler qu'une frame RX est disponible
        )

        try:
            tx_target = THREAD_REGISTRY["tx"]  # THREAD_REGISTRY est un dictionnaire global contenant une table de correspondance statique entre des noms de threads ("rx", "tx") et leurs fonctions associ√©es ; ici on r√©cup√®re la fonction li√©e √† la cl√© "tx" (cible du thread de transmission vers 3D Slicer)
        except KeyError:
            raise RuntimeError("THREAD_REGISTRY ne contient pas l‚Äôentr√©e 'tx' (v√©rifier service.registry)")  # erreur explicite si la fonction TX est absente

        tx_args = (  # arguments pass√©s au thread TX lors de sa cr√©ation
            self._outbox,            # file de sortie contenant les masques et m√©tadonn√©es √† envoyer
            self._stop_event,        # signal d'arr√™t partag√©
            self.slicer_port,        # port de destination pour 3D Slicer
            self.update_tx_stats,    # fonction de rappel pour mettre √† jour les statistiques TX
            self.events.emit,        # √©metteur d'√©v√©nements (notifications, erreurs)
            self._tx_ready,          # üî¨ OPTIMISATION : Event pour signaler la disponibilit√© de frames dans _outbox
        )

        self._rx_thread = threading.Thread(
            target=rx_target,  # fonction ex√©cut√©e par le thread (ici run_plus_client ‚Üí r√©ception depuis PlusServer)
            name="IGT-RX",     # nom du thread (utile pour logs et d√©bogage)
            args=rx_args,      # param√®tres pass√©s √† la fonction : (mailbox, stop_event, host, port, stats_cb, event_cb)
            daemon=True        # mode d√©mon : le thread s‚Äôarr√™te automatiquement √† la fermeture du programme principal
        )  # cr√©ation du thread RX charg√© de recevoir les images IGTLink depuis PlusServer et de les placer dans la mailbox

        self._tx_thread = threading.Thread(target=tx_target, name="IGT-TX", args=tx_args, daemon=True)  # cr√©ation du thread TX en mode d√©mon (arr√™t automatique)

        self._rx_thread.start()  # d√©marre le thread RX (r√©ception des donn√©es depuis PlusServer)
        self._tx_thread.start()  # d√©marre le thread TX (envoi des r√©sultats vers 3D Slicer)

        sup = SupervisorThread(  # cr√©ation du superviseur charg√© de surveiller les threads et m√©triques
            stats=self.stats,  # acc√®s au collecteur de statistiques GatewayStats
            stop_event=self._stop_event,  # signal d‚Äôarr√™t partag√©
            interval_s=self.supervise_interval_s,  # fr√©quence des cycles de supervision (en secondes)
            threads={"rx": self._rx_thread, "tx": self._tx_thread},  # dictionnaire des threads √† surveiller
            events=self.events,  # syst√®me d‚Äô√©v√©nements partag√©
            buffers=self.buffers,  # acc√®s aux buffers internes pour la supervision
            config=self.config,  # configuration compl√®te de la passerelle
        )

        self._supervisor_thread = threading.Thread(target=sup.run, name="IGT-Supervisor", daemon=True)  # cr√©ation du thread de supervision
        self._supervisor_thread.start()  # d√©marre le thread de supervision (veille et mesures p√©riodiques)

        LOG.info("IGTGateway d√©marr√© avec succ√®s.")  # message de confirmation indiquant que tous les threads sont op√©rationnels

    def stop(self) -> None:  # Arr√™te proprement tous les threads du gateway (RX, TX, Supervisor).
        if not self.is_running:  # V√©rifie si le gateway est d√©j√† arr√™t√©.
            LOG.warning("IGTGateway not running ‚Äî stop() ignored.")  # Avertit si l'arr√™t est inutile.
            return  # Sort sans rien faire.

        LOG.info("Stopping IGTGateway‚Ä¶")  # Journalise le d√©but de la s√©quence d'arr√™t.
        start_t = time.time()  # Enregistre le temps de d√©part pour mesurer la dur√©e totale.

        self._stop_event.set()  # D√©clenche le signal d'arr√™t partag√© entre tous les threads.

        for t in (self._rx_thread, self._tx_thread, self._supervisor_thread):  # Parcourt tous les threads √† arr√™ter.
            if t and t.is_alive():  # V√©rifie que le thread existe et qu'il est encore actif.
                try:
                    t.join(timeout=1.0)  # Attend jusqu‚Äô√† 1 seconde que le thread se termine proprement.
                except Exception:
                    LOG.debug("Exception while joining thread %s", getattr(t, "name", t))  # Log en cas d'erreur de join.

        self._running = False  # Met √† jour l‚Äô√©tat interne pour indiquer que le gateway est arr√™t√©.
        LOG.info("IGTGateway stopped cleanly (%.2fs)", time.time() - start_t)  # Log final avec dur√©e totale d'arr√™t.


    def get_status(self) -> Dict[str, Any]:  # Retourne un instantan√© de l‚Äô√©tat courant du gateway.
        snap = self.stats.snapshot()  # R√©cup√®re une copie des statistiques courantes (fps, timestamps, etc.).
        return {  # Construit un dictionnaire d‚Äô√©tat synth√©tique pour supervision ou API.
            "client_alive": bool(self._rx_thread and self._rx_thread.is_alive()),  # True si le thread RX (client) est actif.
            "server_alive": bool(self._tx_thread and self._tx_thread.is_alive()),  # True si le thread TX (serveur) est actif.
            "fps_rx": snap.get("fps_rx", 0.0),  # Dernier d√©bit d‚Äôimages re√ßues (frames/s).
            "fps_tx": snap.get("fps_tx", 0.0),  # Dernier d√©bit d‚Äôimages envoy√©es (frames/s).
            "last_rx_ts": snap.get("last_rx_ts", 0.0),  # Horodatage de la derni√®re image re√ßue.
        }


    def receive_image(self) -> Optional[RawFrame]:  # R√©cup√®re la derni√®re image re√ßue depuis la mailbox (file d‚Äôentr√©e temps r√©el).
        if not self._mailbox:  # Si la mailbox n‚Äôexiste pas ou est vide, on interrompt la lecture.
            return None  # Aucun frame √† lire, retourne None.
        try:
            # Log AVANT le pop() pour voir l'√©tat r√©el de la mailbox
            frame_ids_before = [frame.meta.frame_id for frame in self._mailbox]
            LOG.info(f"[Manager.py receive_image AVANT pop] Taille actuelle de la mailbox : {len(self._mailbox)}, IDs actuels des frames dans la mailbox : {frame_ids_before}")
            
            # AdaptiveDeque.pop() retire l'√©l√©ment le plus r√©cent (le plus √† droite, dernier ajout√©)
            # car deque.append() ajoute √† droite et deque.pop() retire √† droite
            #
            # Visualisation du deque (mailbox):
            # [frame_1] <- [frame_2] <- [frame_3] <- [frame_4] (plus r√©cente)
            #    ‚Üë                                      ‚Üë
            #  ANCIEN                               R√âCENT
            #  (popleft())                          (pop())
            #
            frame = self._mailbox.pop()  # Extrait le plus r√©cent RawFrame de la mailbox (LIFO pour la fra√Æcheur).
            
            # Log APR√àS le pop() pour voir ce qui reste
            frame_ids_after = [frame.meta.frame_id for frame in self._mailbox]
            LOG.info(f"[Manager.py receive_image APR√àS pop] Taille actuelle de la mailbox : {len(self._mailbox)}, IDs actuels des frames dans la mailbox : {frame_ids_after}")
            LOG.info(f"[Manager.py receive_image] FRAME LA PLUS RECENTE extraite : ID {frame.meta.frame_id} (derniere ajoutee a droite du deque)")
            # Log les informations de la frame extraite
            # LOG.info(f"Image extraite de la mailbox : "
            #         f"Frame ID : {frame.meta.frame_id}, "
            #         f"Taille de l'image : {frame.image.shape}, "
            #         f"Timestamp : {frame.meta.ts}, "
            #         f"Pose valide : {frame.meta.pose.valid}, "
            #         f"Spacing : {frame.meta.spacing}, "
            #         f"Orientation : {frame.meta.orientation}, "
            #         f"Device Name : {frame.meta.device_name}")
            # exit()
            # ‚ö†Ô∏è TODO: v√©rifier/potentiellement adapter la politique de purge (clear) ‚Äî actuellement drop-oldest pour garantir une fra√Æcheur temps r√©el
            self._mailbox.clear()  # Vide la mailbox pour ne conserver qu‚Äôune seule frame √† traiter (pr√©serve la fra√Æcheur des donn√©es).
            try:
                now = time.time()  # Capture le timestamp syst√®me local au moment de la r√©ception (r√©f√©rence de calcul du fps local).
                self.stats.set_last_rx_ts(frame.meta.ts)  # Met √† jour l‚Äôhorodatage RX officiel via l‚ÄôAPI de GatewayStats.

                # Si PlusServer fournit d√©j√† un champ fps, on n‚Äôa pas besoin de l‚Äôestimer localement.
                if getattr(frame.meta, "fps", None) is not None:  # V√©rifie si le champ fps existe dans les m√©tadonn√©es.
                    self._last_rx_ts_local = now  # Met simplement √† jour la r√©f√©rence temporelle locale.
                else:
                    # Si aucun fps n‚Äôest fourni, on calcule un fps local bas√© sur le delta de temps entre deux frames successives.
                    if getattr(self, "_last_rx_ts_local", None) is not None:  # V√©rifie qu‚Äôun timestamp local pr√©c√©dent existe.
                        delta = now - self._last_rx_ts_local  # Calcule le temps √©coul√© depuis la derni√®re frame.
                        if delta > 0:  # √âvite une division par z√©ro.
                            try:
                                fps_est = 1.0 / delta  # Estime le fps local (inverse du delta temps).
                                self.stats.update_rx(fps_est, now)  # Met √† jour les statistiques RX avec ce fps estim√©.
                            except Exception:
                                pass  # Ignore silencieusement les erreurs de calcul ou de mise √† jour.
                    self._last_rx_ts_local = now  # Met √† jour le timestamp local pour la prochaine it√©ration.

                # Si la frame contient un identifiant, on enregistre son timestamp RX pour mesurer la latence RX‚ÜíTX plus tard.
                try:
                    fid = getattr(frame.meta, "frame_id", None)  # R√©cup√®re l'identifiant de frame s'il existe.
                    if fid is not None:  # V√©rifie que l'ID est valide.
                        rx_ts = float(getattr(frame.meta, "ts", frame.meta.ts))
                        self.stats.mark_rx(fid, rx_ts)  # Enregistre le moment de r√©ception pour le calcul futur de latence RX‚ÜíTX.
                        # üéØ NOUVELLES M√âTRIQUES INTER-√âTAPES : Marquer le d√©but du workflow GPU-r√©sident
                        self.stats.mark_interstage_rx(fid, rx_ts)  # Enregistre le d√©but du workflow inter-√©tapes d√©taill√©.
                except Exception:
                    pass  # Ignore toute erreur li√©e aux m√©tadonn√©es incompl√®tes ou mal form√©es.

            except Exception:
                pass  # Ignore silencieusement les erreurs si la frame n‚Äôa pas de m√©tadonn√©es ou si les stats ne peuvent pas √™tre mises √† jour.

            return frame  # Retourne la frame extraite de la mailbox pour traitement en aval.

        except Exception:
            return None  # En cas d'erreur inattendue (acc√®s concurrent, corruption m√©moire, etc.), retourne None.

    def wait_for_frame(self, timeout: float = 5.0) -> Optional[RawFrame]:
        """Attendre qu'une frame soit disponible dans la mailbox avec synchronisation.
        
        Args:
            timeout: Temps maximum d'attente en secondes (d√©faut: 5.0s)
            
        Returns:
            RawFrame si une frame est disponible, None si timeout ou erreur
        """
        try:
            # Attendre que l'Event _rx_ready soit signal√© (une frame est disponible)
            if self._rx_ready.wait(timeout=timeout):
                # R√©initialiser l'Event pour la prochaine fois
                self._rx_ready.clear()
                # Appeler receive_image() pour r√©cup√©rer la frame
                return self.receive_image()
            else:
                LOG.warning(f"Timeout apr√®s {timeout}s en attente d'une frame RX")
                return None
        except Exception:
            LOG.exception("Erreur lors de l'attente d'une frame")
            return None

    def send_mask(self, mask_array: Any, meta: Dict[str, Any]) -> bool:  # Envoie un masque de segmentation et ses m√©tadonn√©es vers 3D Slicer.
        """
        Enfile (enqueue) un masque et ses m√©tadonn√©es pour transmission √† 3D Slicer.

        Notes :
            - Le dictionnaire `meta` est automatiquement enrichi avec les m√©triques
            de performance du gateway :
                ‚Ä¢ latency_ms_avg, latency_ms_p95 ‚Üí latence moyenne et 95·µâ percentile
                ‚Ä¢ snapshot_count / stats_seq ‚Üí compteur d‚Äô√©chantillons
            - Les cl√©s existantes dans `meta` ne sont pas √©cras√©es.
            - Retourne True si le masque a √©t√© ajout√© avec succ√®s, False sinon.
        """
        try:
            if len(self._outbox) >= self._outbox.maxlen:  # Si la file de sortie (_outbox) est pleine‚Ä¶
            # ‚ö†Ô∏è TODO [ARCHI]: la suppression du plus ancien masque (drop-oldest) peut casser la correspondance frame_id <-> RawFrame d‚Äôorigine.
            #    - Actuellement: priorit√© √† la fra√Æcheur du flux.
            #    - √Ä revoir: impl√©menter une politique de synchronisation stricte (ex: ne dropper que les masques sans frame correspondante).
            #    - Objectif futur: garantir superposition exacte entre l‚Äôimage d‚Äôentr√©e et la segmentation affich√©e dans Slicer.
                try:
                    self._outbox.popleft()  # Supprime le plus ancien masque (politique drop-oldest pour pr√©server la fra√Æcheur).
                    from core.monitoring.kpi import increment_drops  # Import diff√©r√© du compteur de drops (suivi KPI).
                    try:
                        increment_drops("tx.drop_total", 1, emit=True)  # Incr√©mente la m√©trique globale "tx.drop_total" de +1 et la publie.
                    except Exception:
                        LOG.debug("increment_drops failed or not available")  # Si la fonction KPI est absente, log de debug seulement.
                except Exception:
                    LOG.debug("Failed to drop oldest from outbox")  # Si la suppression √©choue (erreur de file), on ignore.

            # --------------------------------------------------------------
            # Bloc d‚Äôinjection des m√©triques de latence :
            # Ajoute les statistiques de performance r√©centes (moyenne, p95, compteur)
            # dans les m√©tadonn√©es transmises √† 3D Slicer.
            # --------------------------------------------------------------
            try:
                snap = self.stats.snapshot()  # R√©cup√®re un instantan√© des statistiques actuelles du Gateway.
                meta.setdefault("latency_ms_avg", float(snap.get("latency_ms_avg", 0.0)))  # Injecte la latence moyenne (si absente).
                meta.setdefault("latency_ms_p95", float(snap.get("latency_ms_p95", 0.0)))  # Injecte la latence 95·µâ percentile.
                stats_seq = int(snap.get("snapshot_count", 0))  # Compteur de snapshots (nombre d‚Äôit√©rations statistiques).
                meta.setdefault("stats_seq", stats_seq)  # Cl√© r√©trocompatible avec anciens clients.
                meta.setdefault("snapshot_count", stats_seq)  # M√™me valeur pour compatibilit√© montante.

                # Log de confirmation en mode DEBUG
                if LOG.isEnabledFor(logging.DEBUG):
                    LOG.debug(
                        "Injected latency stats into meta: avg=%.2f p95=%.2f seq=%d",
                        meta.get("latency_ms_avg", 0.0),
                        meta.get("latency_ms_p95", 0.0),
                        meta.get("stats_seq", meta.get("snapshot_count", 0)),
                    )
            except Exception:
                pass  # Si l‚Äôinjection √©choue (m√©tadonn√©es manquantes ou stats indisponibles), on ignore silencieusement.

            self._outbox.append((mask_array, meta))  # Empile le couple (masque, m√©tadonn√©es) dans la file de sortie.
            
            # üî¨ OPTIMISATION : Signaler au thread TX qu'une frame est disponible (r√©veil instantan√©)
            self._tx_ready.set()

            # --- Bloc de marquage TX pour calcul de latence RX‚ÜíTX ---
            try:
                fid = meta.get("frame_id", None)  # R√©cup√®re l‚Äôidentifiant de frame associ√© (s‚Äôil existe).
                tx_ts = meta.get("ts", time.time())  # Timestamp d‚Äôenvoi (par d√©faut temps actuel).
                if fid is not None:
                    self.stats.mark_tx(int(fid), float(tx_ts))  # Enregistre le timestamp TX pour cette frame dans GatewayStats.
                    # üéØ Enregistrer aussi le timestamp TX pour les m√©triques inter-√©tapes d√©taill√©es
                    self.stats.mark_interstage_tx(int(fid), float(tx_ts))  # Calcule automatiquement toutes les latences inter-√©tapes
                    if LOG.isEnabledFor(logging.DEBUG):
                        snap2 = self.stats.snapshot()  # R√©cup√®re les stats mises √† jour apr√®s le marquage TX.
                        instant = float(snap2.get("latency_ms_max", 0.0))  # Derni√®re latence mesur√©e (en ms).
                        avg = float(snap2.get("latency_ms_avg", 0.0))  # Moyenne actuelle de latence.
                        p95 = float(snap2.get("latency_ms_p95", 0.0))  # 95·µâ percentile de latence.
                        LOG.debug("Frame %s latency %.2f ms (avg %.2f, p95 %.2f)", fid, instant, avg, p95)  # Log d√©taill√© de performance.
            except Exception:
                pass  # Tol√©rance compl√®te aux erreurs pour ne jamais bloquer la pipeline.

            return True  # Succ√®s de l‚Äôenvoi.
        except Exception:
            LOG.exception("Failed to enqueue mask to outbox")  # Log complet si une erreur inattendue emp√™che l‚Äôenvoi.
            return False  # √âchec global.


    def _drain_outbox(self) -> list:  # Vide compl√®tement la file de sortie et renvoie son contenu (utile pour inspection en test).
        items = list(self._outbox)  # Copie tous les √©l√©ments actuellement pr√©sents.
        self._outbox.clear()  # Vide la file de sortie.
        return items  # Retourne la liste des √©l√©ments extraits.


    # === Proxys pour les statistiques et √©v√©nements ===
    def update_rx_stats(self, fps: float, ts: float, bytes_count: int = 0) -> None:  # Met √† jour les statistiques de r√©ception (fr√©quence et taille des donn√©es).
        self.stats.update_rx(fps, ts, bytes_count)  # Appelle la m√©thode du collecteur GatewayStats.

    def update_tx_stats(self, fps: float, bytes_count: int = 0) -> None:  # Met √† jour les statistiques d‚Äôenvoi (d√©bit de sortie).
        self.stats.update_tx(fps, bytes_count)  # D√©l√®gue la mise √† jour au collecteur GatewayStats.

    def on_event(self, callback):  # Enregistre une fonction de rappel (callback) √† ex√©cuter lors d‚Äôun √©v√©nement syst√®me.
        self.events.on_event(callback)  # Transmet la demande au gestionnaire d‚Äô√©v√©nements EventEmitter.

    def _emit_event(self, name: str, payload: Dict[str, Any]):  # √âmet un √©v√©nement interne avec un nom et un contenu (dictionnaire de donn√©es).
        self.events.emit(name, payload)  # Passe la notification au syst√®me EventEmitter partag√©.

